@{
    ViewBag.Title = "Home Page";
}

<div class="jumbotron">
    <h1>Kevin's ASP.NET Project</h1>
    <p class="lead">.NET app connected to Azure App Service.</p>
</div>

<div class="row">
    <div class="col-md-6">
        <h2>GET API Test</h2>
        <p>
            <button id="getApiButton" class="btn btn-primary">GET</button>
        </p>
        <p id="getApiResult"></p>
    </div>

    <div class="col-md-6">
        <h2>POST API Test with File Upload</h2>
        <form id="uploadForm" enctype="multipart/form-data">
            <dl>
                <dt>
                    <label for="file">Select File to Upload</label>
                </dt>
                <dd>
                    <input type="file" id="file" name="file" />
                </dd>
            </dl>
            <input class="btn" type="submit" value="Upload" />
        </form>
        <p id="uploadApiResult"
    </div>
</div>

<script>
    document.getElementById('getApiButton').addEventListener('click', function () {
        fetch('/api/data', {method: 'GET'})
        .then(response => response.json())
        .then(data => { document.getElementById('getApiResult').innerText = JSON.stringify(data, null, 2)})
        .catch(error => console.error('Error:', error));
    });
</script>

<script>
    document.getElementById('uploadForm').addEventListener('submit', async (event) => {
        // prevent default form submission
        event.preventDefault();
        const formData = new FormData(event.target)
        const resultElement = document.getElementById('uploadApiResult');
        resultElement.innerText = "Uploading...";

        try {
            const response = await fetch('/api/upload', {
                method: 'POST',
                body: formData
            });

            const data = await response.text();

            if (!response.ok) {
                throw new Error(`HTTP error with status ${response.status}, message: ${data}`);
            }

            // set innerHTML instead of innerText to apply formatting for newline and escape characters
            resultElement.innerHTML = `${data}`
        } catch(error) {
            resultElement.innerText = `Error: ${error.message}`
        }
    });
</script>
